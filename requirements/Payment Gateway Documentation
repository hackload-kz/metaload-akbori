<div class="prose prose-invert prose-slate max-w-none prose-headings:text-white prose-h1:text-3xl prose-h1:font-bold prose-h1:mb-6 prose-h1:border-b prose-h1:border-slate-700 prose-h1:pb-4 prose-h2:text-2xl prose-h2:font-semibold prose-h2:mb-4 prose-h2:mt-8 prose-h3:text-xl prose-h3:font-semibold prose-h3:mb-3 prose-h3:mt-6 prose-h4:text-lg prose-h4:font-semibold prose-h4:mb-2 prose-h4:mt-4 prose-p:text-slate-300 prose-p:mb-4 prose-p:leading-relaxed prose-ul:text-slate-300 prose-ul:mb-4 prose-ul:list-disc prose-ul:list-inside prose-ul:space-y-2 prose-ol:text-slate-300 prose-ol:mb-4 prose-ol:list-decimal prose-ol:list-inside prose-ol:space-y-2 prose-li:text-slate-300 prose-code:bg-slate-700/50 prose-code:text-amber-400 prose-code:px-2 prose-code:py-1 prose-code:rounded prose-code:text-sm prose-code:font-mono prose-pre:bg-slate-800 prose-pre:border prose-pre:border-slate-700 prose-pre:rounded-lg prose-pre:p-4 prose-pre:mb-4 prose-pre:overflow-x-auto prose-pre:text-slate-300 prose-blockquote:border-l-4 prose-blockquote:border-amber-400 prose-blockquote:pl-4 prose-blockquote:py-2  prose-blockquote:mb-4 prose-blockquote:bg-slate-800/30 prose-blockquote:italic prose-blockquote:text-slate-300 prose-table:border prose-table:border-slate-700 prose-table:rounded-lg prose-table:mb-4 prose-thead:bg-slate-800 prose-tbody:bg-slate-900/50 prose-tr:border-b prose-tr:border-slate-700 prose-th:px-4 prose-th:py-3 prose-th:text-left prose-th:text-white prose-th:font-semibold prose-td:px-4 prose-td:py-3 prose-td:text-slate-300 prose-a:text-amber-400 prose-a:underline hover:prose-a:text-amber-300 prose-strong:text-white prose-strong:font-semibold prose-em:text-slate-300 prose-em:italic"><h1>Документация клиентского API платежного шлюза PaymentGateway</h1>
<p><em>Последнее обновление: 15 августа 2025 г. в 03:57</em></p>
<h2>Оглавление</h2>
<ol>
<li><a href="#%D0%B6%D0%B8%D0%B7%D0%BD%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9-%D1%86%D0%B8%D0%BA%D0%BB-%D0%BF%D0%BB%D0%B0%D1%82%D0%B5%D0%B6%D0%B0">Жизненный цикл платежа</a></li>
<li><a href="#%D0%B0%D1%83%D1%82%D0%B5%D0%BD%D1%82%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D1%8F">Аутентификация</a></li>
<li><a href="#%D0%BA%D0%BE%D0%B4%D1%8B-%D0%BE%D1%88%D0%B8%D0%B1%D0%BE%D0%BA">Коды ошибок</a></li>
<li><a href="#api-%D1%8D%D0%BD%D0%B4%D0%BF%D0%BE%D0%B8%D0%BD%D1%82%D1%8B">API эндпоинты</a></li>
<li><a href="#%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B-%D0%B7%D0%B0%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2">Примеры запросов</a></li>
</ol>
<hr>
<h2>Жизненный цикл платежа</h2>
<p>Система поддерживает полный жизненный цикл обработки платежей с несколькими стадиями:</p>
<h3>Стадии платежа</h3>
<pre><code class="language-mermaid">graph TD
    A[Получение реквизитов мерчанта] --&gt; B[Создание платежа]
    B --&gt; C[Ожидание оплаты NEW]
    C --&gt; D[Авторизация AUTHORIZED]
    D --&gt; E[Подтверждение CONFIRMED]
    D --&gt; F[Отмена CANCELLED]
    E --&gt; G[Возврат REFUNDED]
    C --&gt; H[Отклонение FAILED]
    C --&gt; I[Истечение времени EXPIRED]
</code></pre>
<h3>1. Регистрация мерчанта (Команда организаторов это делает. Реквизиты доступны в <a href="https://hub.hackload.kz">https://hub.hackload.kz</a>)</h3>
<ul>
<li><strong>Эндпоинт</strong>: <code>POST /api/v1/TeamRegistration/register</code></li>
<li><strong>Назначение</strong>: Регистрация нового мерчанта для приема платежей</li>
<li><strong>Результат</strong>: Получение учетных данных для API</li>
</ul>
<h3>2. Создание платежа</h3>
<ul>
<li><strong>Эндпоинт</strong>: <code>POST /api/v1/PaymentInit/init</code></li>
<li><strong>Назначение</strong>: Создание нового платежного намерения</li>
<li><strong>Статус</strong>: <code>NEW</code></li>
<li><strong>Результат</strong>: URL для оплаты покупателем</li>
</ul>
<h3>3. Обработка платежа</h3>
<ul>
<li><strong>Процесс</strong>: Покупатель вводит данные карты на платежной форме</li>
<li><strong>Статус</strong>: <code>NEW</code> → <code>AUTHORIZED</code></li>
<li><strong>Безопасность</strong>: PCI DSS compliant обработка карточных данных</li>
</ul>
<h3>4. Подтверждение платежа</h3>
<ul>
<li><strong>Эндпоинт</strong>: <code>POST /api/v1/PaymentConfirm/confirm</code></li>
<li><strong>Назначение</strong>: Подтверждение авторизованного платежа для списания средств</li>
<li><strong>Статус</strong>: <code>AUTHORIZED</code> → <code>CONFIRMED</code></li>
</ul>
<h3>5. Проверка статуса</h3>
<ul>
<li><strong>Эндпоинт</strong>: <code>POST /api/v1/PaymentCheck/check</code></li>
<li><strong>Назначение</strong>: Получение текущего статуса платежа</li>
<li><strong>Поддержка</strong>: Поиск по PaymentId или OrderId</li>
</ul>
<h3>6. Отмена платежа</h3>
<ul>
<li><strong>Эндпоинт</strong>: <code>POST /api/v1/PaymentCancel/cancel</code></li>
<li><strong>Назначение</strong>: Отмена, реверс или возврат платежа</li>
<li><strong>Типы</strong>: Отмена (NEW), Реверс (AUTHORIZED), Возврат (CONFIRMED)</li>
</ul>
<hr>
<h2>Аутентификация</h2>
<p>Система использует SHA-256 HMAC аутентификацию с защитой от повторных атак.</p>
<h3>Алгоритм генерации токена (УПРОЩЕННАЯ ВЕРСИЯ)</h3>
<p><strong>Краткая формула</strong>: <code>Token = SHA256(Amount + Currency + OrderId + Password + TeamSlug)</code></p>
<h4>Детальный алгоритм:</h4>
<p><strong>ВАЖНО</strong>: Система использует упрощенную схему аутентификации с <strong>только 5 основными параметрами</strong>.</p>
<ol>
<li><p><strong>Сбор параметров</strong>: Используются <strong>только 5 обязательных параметров</strong>:</p>
<ul>
<li>✅ <strong>Amount</strong> - сумма платежа в копейках</li>
<li>✅ <strong>Currency</strong> - валюта платежа (например, "RUB")</li>
<li>✅ <strong>OrderId</strong> - уникальный идентификатор заказа</li>
<li>✅ <strong>TeamSlug</strong> - идентификатор команды. Указан как <code>MERCHANT_ID</code></li>
<li>✅ <strong>Password</strong> - пароль команды. Указан как <code>MERCHANT_PASSWORD</code> </li>
<li>❌ <strong>Исключаются</strong>: ВСЕ остальные параметры (Description, Email, URLs, etc.)</li>
</ul>
</li>
<li><p><strong>Добавление пароля</strong>: К 4 параметрам запроса автоматически добавляется <code>Password</code> команды</p>
</li>
<li><p><strong>Фиксированный порядок</strong>: Параметры <strong>ВСЕГДА</strong> используются в строгом алфавитном порядке:</p>
<ul>
<li><strong>КРИТИЧНО</strong>: <code>Amount</code> → <code>Currency</code> → <code>OrderId</code> → <code>Password</code> → <code>TeamSlug</code></li>
<li>Этот порядок НЕ меняется независимо от порядка в JSON запросе</li>
</ul>
</li>
<li><p><strong>Конкатенация значений</strong>: Значения параметров конкатенируются без разделителей</p>
<ul>
<li>Пример: <code>"19200" + "RUB" + "order-123" + "MyPassword123" + "my-team"</code></li>
<li>Результат: <code>"19200RUBorder-123MyPassword123my-team"</code></li>
</ul>
</li>
<li><p><strong>SHA-256 хеширование</strong>: К получившейся строке применяется SHA-256 с кодировкой UTF-8</p>
<ul>
<li>Результат: строка в нижнем регистре (hex)</li>
</ul>
</li>
</ol>
<h4>Важные особенности упрощенной схемы:</h4>
<ul>
<li><strong>Только 5 параметров</strong>: Независимо от содержимого JSON запроса, в токене участвуют только Amount, Currency, OrderId, Password, TeamSlug</li>
<li><strong>Игнорирование остальных полей</strong>: Description, Email, URLs, Receipt, Data и все остальные поля НЕ влияют на токен</li>
<li><strong>Простота интеграции</strong>: Не нужно анализировать структуру запроса - всегда используются одни и те же 5 полей</li>
<li><strong>Обратная совместимость</strong>: Токены генерируются одинаково для простых и сложных запросов</li>
</ul>
<h3>Пример генерации токена (УПРОЩЕННАЯ СХЕМА)</h3>
<pre><code class="language-bash"># Исходные параметры (только 5 обязательных)
amount="19200"
currency="RUB"
orderId="21090"
teamSlug="MerchantTeamSlug"
password="usaf8fw8fsw21g"

# КРИТИЧНО: Параметры ВСЕГДА в строгом алфавитном порядке:
# Amount → Currency → OrderId → Password → TeamSlug
token_params="${amount}${currency}${orderId}${password}${teamSlug}"

echo "Строка для хеширования: $token_params"
# Результат: "19200RUB21090usaf8fw8fsw21gMerchantTeamSlug"

# Генерация токена SHA-256
token=$(echo -n "$token_params" | sha256sum | cut -d' ' -f1)
echo "Сгенерированный токен: $token"

# ВАЖНО: Даже если запрос содержит дополнительные поля, 
# они НЕ участвуют в генерации токена:
curl -X POST /api/v1/PaymentInit/init \
  -H "Content-Type: application/json" \
  -d "{
    \"teamSlug\": \"$teamSlug\",
    \"token\": \"$token\",
    \"amount\": $amount,
    \"orderId\": \"$orderId\",
    \"currency\": \"$currency\",
    \"description\": \"Это поле НЕ влияет на токен\",
    \"email\": \"customer@example.com\",
    \"successURL\": \"https://example.com/success\",
    \"failURL\": \"https://example.com/fail\"
  }"
</code></pre>
<h4>Пошаговый пример упрощенной аутентификации:</h4>
<ol>
<li><strong>Исходный запрос</strong> (может содержать любые поля):</li>
</ol>
<pre><code class="language-json">{
  "teamSlug": "MerchantTeamSlug",
  "amount": 19200,
  "orderId": "21090",
  "currency": "RUB",
  "description": "Подарочная карта",     // ❌ ИГНОРИРУЕТСЯ
  "email": "customer@example.com",      // ❌ ИГНОРИРУЕТСЯ
  "successURL": "https://example.com",  // ❌ ИГНОРИРУЕТСЯ
  "receipt": { ... },                   // ❌ ИГНОРИРУЕТСЯ
  "data": { ... }                       // ❌ ИГНОРИРУЕТСЯ
}
</code></pre>
<ol start="2">
<li><strong>Извлеченные параметры</strong> (ТОЛЬКО 5 основных):</li>
</ol>
<pre><code>Amount: "19200"     ✅ ИСПОЛЬЗУЕТСЯ
Currency: "RUB"     ✅ ИСПОЛЬЗУЕТСЯ
OrderId: "21090"    ✅ ИСПОЛЬЗУЕТСЯ
TeamSlug: "MerchantTeamSlug"  ✅ ИСПОЛЬЗУЕТСЯ
</code></pre>
<ol start="3">
<li><strong>Добавление пароля</strong>:</li>
</ol>
<pre><code>Amount: "19200"
Currency: "RUB"
OrderId: "21090"
Password: "usaf8fw8fsw21g"  ✅ ДОБАВЛЯЕТСЯ АВТОМАТИЧЕСКИ
TeamSlug: "MerchantTeamSlug"
</code></pre>
<ol start="4">
<li><strong>Фиксированный порядок</strong> (Amount → Currency → OrderId → Password → TeamSlug):</li>
</ol>
<pre><code>Amount: "19200"
Currency: "RUB"  
OrderId: "21090"
Password: "usaf8fw8fsw21g"
TeamSlug: "MerchantTeamSlug"
</code></pre>
<ol start="5">
<li><strong>Конкатенация значений</strong>:</li>
</ol>
<pre><code>"19200RUB21090usaf8fw8fsw21gMerchantTeamSlug"
</code></pre>
<ol start="6">
<li><strong>SHA-256 хеширование</strong>:</li>
</ol>
<pre><code>Input:  "19200RUB21090usaf8fw8fsw21gMerchantTeamSlug"
Output: "b8f2f8e5c9d6a4c8f7b5e3a2d1f0e9c8b7a6f5d4e3c2b1a0f9e8d7c6b5a4f3e2"
</code></pre>
<p><strong>Ключевая особенность</strong>: Независимо от количества полей в JSON, токен всегда генерируется из одних и тех же 5 параметров!</p>
<h3>Безопасность</h3>
<ul>
<li><strong>Защита от повторов</strong>: Каждый токен уникален для конкретного набора параметров</li>
<li><strong>Временные окна</strong>: Рекомендуется использовать короткие временные окна для запросов</li>
<li><strong>HTTPS</strong>: Все запросы должны выполняться по HTTPS</li>
</ul>
<hr>
<h2>Коды ошибок</h2>
<h3>Ошибки инициализации платежа (1xxx)</h3>
<table>
<thead>
<tr>
<th>Код</th>
<th>Описание</th>
<th>HTTP Статус</th>
<th>Действие</th>
</tr>
</thead>
<tbody><tr>
<td>1000</td>
<td>Неверное тело запроса</td>
<td>400</td>
<td>Проверить формат JSON</td>
</tr>
<tr>
<td>1001</td>
<td>Ошибка аутентификации</td>
<td>401</td>
<td>Проверить teamSlug и token</td>
</tr>
<tr>
<td>1002</td>
<td>Дублирующийся платеж</td>
<td>409</td>
<td>Изменить orderId или дождаться завершения</td>
</tr>
<tr>
<td>1003</td>
<td>Неверный аргумент</td>
<td>400</td>
<td>Проверить значения параметров</td>
</tr>
<tr>
<td>1004</td>
<td>Недостаточно средств</td>
<td>402</td>
<td>Пополнить баланс</td>
</tr>
<tr>
<td>1005</td>
<td>Превышение лимитов</td>
<td>400</td>
<td>Уменьшить сумму или связаться с поддержкой</td>
</tr>
<tr>
<td>1006</td>
<td>Неподдерживаемая валюта</td>
<td>400</td>
<td>Использовать RUB, USD или EUR</td>
</tr>
<tr>
<td>1007</td>
<td>Ошибка платежного провайдера</td>
<td>402</td>
<td>Повторить позже</td>
</tr>
<tr>
<td>1100</td>
<td>Ошибка валидации</td>
<td>400</td>
<td>Исправить данные запроса</td>
</tr>
<tr>
<td>1404</td>
<td>Платеж не найден</td>
<td>404</td>
<td>Проверить paymentId</td>
</tr>
<tr>
<td>1408</td>
<td>Превышение времени ожидания</td>
<td>408</td>
<td>Повторить запрос</td>
</tr>
<tr>
<td>1422</td>
<td>Нарушение бизнес-правил</td>
<td>422</td>
<td>Проверить ограничения</td>
</tr>
<tr>
<td>1429</td>
<td>Превышение лимита запросов</td>
<td>429</td>
<td>Дождаться и повторить</td>
</tr>
<tr>
<td>9998</td>
<td>Ошибка системы</td>
<td>500</td>
<td>Обратиться в поддержку</td>
</tr>
<tr>
<td>9999</td>
<td>Внутренняя ошибка сервера</td>
<td>500</td>
<td>Обратиться в поддержку</td>
</tr>
</tbody></table>
<h3>Ошибки проверки статуса (1xxx)</h3>
<table>
<thead>
<tr>
<th>Код</th>
<th>Описание</th>
<th>HTTP Статус</th>
<th>Действие</th>
</tr>
</thead>
<tbody><tr>
<td>1000</td>
<td>Неверное тело запроса</td>
<td>400</td>
<td>Проверить formат JSON</td>
</tr>
<tr>
<td>1001</td>
<td>Ошибка аутентификации</td>
<td>401</td>
<td>Проверить teamSlug и token</td>
</tr>
<tr>
<td>1003</td>
<td>Неверный аргумент</td>
<td>400</td>
<td>Проверить paymentId или orderId</td>
</tr>
<tr>
<td>1100</td>
<td>Ошибка валидации</td>
<td>400</td>
<td>Исправить данные запроса</td>
</tr>
<tr>
<td>1404</td>
<td>Платеж не найден</td>
<td>404</td>
<td>Проверить paymentId/orderId</td>
</tr>
<tr>
<td>1408</td>
<td>Превышение времени ожидания</td>
<td>408</td>
<td>Повторить запрос</td>
</tr>
<tr>
<td>1429</td>
<td>Превышение лимита запросов</td>
<td>429</td>
<td>Дождаться и повторить</td>
</tr>
<tr>
<td>9999</td>
<td>Внутренняя ошибка сервера</td>
<td>500</td>
<td>Обратиться в поддержку</td>
</tr>
</tbody></table>
<h3>Ошибки подтверждения платежа (2xxx)</h3>
<table>
<thead>
<tr>
<th>Код</th>
<th>Описание</th>
<th>HTTP Статус</th>
<th>Действие</th>
</tr>
</thead>
<tbody><tr>
<td>2000</td>
<td>Неверное тело запроса</td>
<td>400</td>
<td>Проверить формат JSON</td>
</tr>
<tr>
<td>2001</td>
<td>Ошибка аутентификации</td>
<td>401</td>
<td>Проверить teamSlug и token</td>
</tr>
<tr>
<td>2003</td>
<td>Неверный аргумент</td>
<td>400</td>
<td>Проверить значения параметров</td>
</tr>
<tr>
<td>2100</td>
<td>Ошибка валидации</td>
<td>400</td>
<td>Исправить данные запроса</td>
</tr>
<tr>
<td>2404</td>
<td>Платеж не найден</td>
<td>404</td>
<td>Проверить paymentId</td>
</tr>
<tr>
<td>2408</td>
<td>Превышение времени ожидания</td>
<td>408</td>
<td>Повторить запрос</td>
</tr>
<tr>
<td>2409</td>
<td>Платеж уже подтвержден</td>
<td>409</td>
<td>Проверить статус платежа</td>
</tr>
<tr>
<td>2429</td>
<td>Превышение лимита запросов</td>
<td>429</td>
<td>Дождаться и повторить</td>
</tr>
<tr>
<td>9999</td>
<td>Внутренняя ошибка сервера</td>
<td>500</td>
<td>Обратиться в поддержку</td>
</tr>
</tbody></table>
<h3>Ошибки отмены платежа (3xxx)</h3>
<table>
<thead>
<tr>
<th>Код</th>
<th>Описание</th>
<th>HTTP Статус</th>
<th>Действие</th>
</tr>
</thead>
<tbody><tr>
<td>3000</td>
<td>Неверное тело запроса</td>
<td>400</td>
<td>Проверить формат JSON</td>
</tr>
<tr>
<td>3001</td>
<td>Ошибка аутентификации</td>
<td>401</td>
<td>Проверить teamSlug и token</td>
</tr>
<tr>
<td>3003</td>
<td>Неверный аргумент</td>
<td>400</td>
<td>Проверить значения параметров</td>
</tr>
<tr>
<td>3100</td>
<td>Ошибка валидации</td>
<td>400</td>
<td>Исправить данные запроса</td>
</tr>
<tr>
<td>3404</td>
<td>Платеж не найден</td>
<td>404</td>
<td>Проверить paymentId</td>
</tr>
<tr>
<td>3408</td>
<td>Превышение времени ожидания</td>
<td>408</td>
<td>Повторить запрос</td>
</tr>
<tr>
<td>3409</td>
<td>Платеж уже отменен</td>
<td>409</td>
<td>Проверить статус платежа</td>
</tr>
<tr>
<td>3422</td>
<td>Нарушение бизнес-правил</td>
<td>422</td>
<td>Частичная отмена не поддерживается</td>
</tr>
<tr>
<td>3429</td>
<td>Превышение лимита запросов</td>
<td>429</td>
<td>Дождаться и повторить</td>
</tr>
<tr>
<td>3503</td>
<td>Сервис временно недоступен</td>
<td>503</td>
<td>Повторить позже</td>
</tr>
<tr>
<td>9999</td>
<td>Внутренняя ошибка сервера</td>
<td>500</td>
<td>Обратиться в поддержку</td>
</tr>
</tbody></table>
<h3>Ошибки регистрации команды (2xxx)</h3>
<table>
<thead>
<tr>
<th>Код</th>
<th>Описание</th>
<th>HTTP Статус</th>
<th>Действие</th>
</tr>
</thead>
<tbody><tr>
<td>2001</td>
<td>Неверные данные запроса</td>
<td>400</td>
<td>Исправить данные</td>
</tr>
<tr>
<td>2002</td>
<td>TeamSlug уже существует</td>
<td>409</td>
<td>Выбрать другой teamSlug</td>
</tr>
<tr>
<td>2003</td>
<td>Email уже зарегистрирован</td>
<td>409</td>
<td>Использовать другой email</td>
</tr>
<tr>
<td>2004</td>
<td>Условия не приняты</td>
<td>400</td>
<td>Принять условия обслуживания</td>
</tr>
<tr>
<td>2404</td>
<td>Команда не найдена</td>
<td>404</td>
<td>Проверить teamSlug</td>
</tr>
<tr>
<td>2429</td>
<td>Превышение лимита регистраций</td>
<td>429</td>
<td>Дождаться и повторить</td>
</tr>
<tr>
<td>9999</td>
<td>Внутренняя ошибка сервера</td>
<td>500</td>
<td>Обратиться в поддержку</td>
</tr>
</tbody></table>
<hr>
<h2>API эндпоинты</h2>
<h3>1. Регистрация команды (Для администратора)</h3>
<p><strong>POST</strong> <code>/api/v1/TeamRegistration/register</code></p>
<p>Регистрация нового мерчанта для приема платежей.</p>
<p><strong>Заголовки:</strong></p>
<pre><code>Content-Type: application/json
</code></pre>
<p><strong>Тело запроса:</strong></p>
<pre><code class="language-json">{
  "teamSlug": "my-online-store",
  "password": "SecurePassword123!",
  "teamName": "My Online Store",
  "email": "merchant@mystore.com",
  "phone": "+1234567890",
  "successURL": "https://mystore.com/payment/success",
  "failURL": "https://mystore.com/payment/fail",
  "notificationURL": "https://mystore.com/payment/webhook",
  "supportedCurrencies": "RUB,USD,EUR",
  "businessInfo": {
    "businessType": "ecommerce",
    "website": "https://mystore.com"
  },
  "acceptTerms": true
}
</code></pre>
<p><strong>Ответ (201 Created):</strong></p>
<pre><code class="language-json">{
  "success": true,
  "message": "Team registered successfully",
  "teamSlug": "my-online-store",
  "teamId": "123e4567-e89b-12d3-a456-426614174000",
  "passwordHashPreview": "d3ad9315...",
  "createdAt": "2025-08-06T10:30:00Z",
  "status": "ACTIVE",
  "apiEndpoint": "https://gateway.hackload.com/api/v1",
  "details": {
    "teamName": "My Online Store",
    "email": "merchant@mystore.com",
    "supportedCurrencies": ["RUB", "USD", "EUR"],
    "nextSteps": [
      "Test payment initialization using your credentials",
      "Configure webhook endpoint for notifications",
      "Review API documentation for integration"
    ]
  }
}
</code></pre>
<h3>2. Создание платежа</h3>
<p>Здесь и везде далее, <code>teamSlug</code> указан как <code>MERCHANT_ID</code> в переменных окружения команды</p>
<p><strong>POST</strong> <code>/api/v1/PaymentInit/init</code></p>
<p>Создание нового платежного намерения.</p>
<p><strong>Заголовки:</strong></p>
<pre><code>Content-Type: application/json
</code></pre>
<p><strong>Тело запроса:</strong></p>
<pre><code class="language-json">{
  "teamSlug": "my-store",
  "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
  "amount": 150000,
  "orderId": "order-12345",
  "currency": "RUB",
  "description": "Book purchase",
  "successURL": "https://mystore.com/success",
  "failURL": "https://mystore.com/fail",
  "notificationURL": "https://mystore.com/webhook",
  "paymentExpiry": 30,
  "email": "customer@example.com",
  "language": "ru"
}
</code></pre>
<p><strong>Ответ (200 OK):</strong></p>
<pre><code class="language-json">{
  "success": true,
  "paymentId": "pay_123456789",
  "orderId": "order-12345",
  "status": "NEW",
  "amount": 150000,
  "currency": "RUB",
  "paymentURL": "https://gateway.hackload.com/payment/pay_123456789",
  "expiresAt": "2025-01-30T12:30:00Z",
  "createdAt": "2025-01-30T12:00:00Z"
}
</code></pre>
<h3>3. Проверка статуса платежа</h3>
<p><strong>POST</strong> <code>/api/v1/PaymentCheck/check</code></p>
<p>Получение статуса платежа по PaymentId или OrderId.</p>
<p><strong>Заголовки:</strong></p>
<pre><code>Content-Type: application/json
</code></pre>
<p><strong>Тело запроса (по PaymentId):</strong></p>
<pre><code class="language-json">{
  "teamSlug": "my-store",
  "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
  "paymentId": "pay_123456789",
  "includeTransactions": true,
  "includeCardDetails": true,
  "includeCustomerInfo": false,
  "includeReceipt": false,
  "language": "ru"
}
</code></pre>
<p><strong>Тело запроса (по OrderId):</strong></p>
<pre><code class="language-json">{
  "teamSlug": "my-store",
  "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
  "orderId": "order-12345",
  "includeTransactions": false,
  "includeCardDetails": false,
  "includeCustomerInfo": true,
  "includeReceipt": true,
  "language": "en"
}
</code></pre>
<p><strong>Ответ (200 OK):</strong></p>
<pre><code class="language-json">{
  "success": true,
  "payments": [
    {
      "paymentId": "pay_123456789",
      "orderId": "order-12345",
      "status": "CONFIRMED",
      "statusDescription": "Payment confirmed successfully",
      "amount": 150000,
      "currency": "RUB",
      "createdAt": "2025-01-30T12:00:00Z",
      "updatedAt": "2025-01-30T12:05:00Z",
      "expiresAt": "2025-01-30T12:30:00Z",
      "description": "Book purchase",
      "payType": "O"
    }
  ],
  "totalCount": 1,
  "orderId": "order-12345"
}
</code></pre>
<h3>4. Подтверждение платежа</h3>
<p><strong>POST</strong> <code>/api/v1/PaymentConfirm/confirm</code></p>
<p>Подтверждение авторизованного платежа для списания средств.</p>
<p><strong>Заголовки:</strong></p>
<pre><code>Content-Type: application/json
</code></pre>
<p><strong>Тело запроса:</strong></p>
<pre><code class="language-json">{
  "teamSlug": "my-store",
  "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
  "paymentId": "pay_123456789",
  "amount": 150000,
  "description": "Order confirmation for books",
  "receipt": {
    "email": "customer@example.com",
    "phone": "+79001234567"
  },
  "data": {
    "confirmationReason": "Customer payment approved",
    "merchantReference": "ORDER-12345"
  }
}
</code></pre>
<p><strong>Ответ (200 OK):</strong></p>
<pre><code class="language-json">{
  "success": true,
  "paymentId": "pay_123456789",
  "orderId": "order-12345",
  "status": "CONFIRMED",
  "authorizedAmount": 150000,
  "confirmedAmount": 150000,
  "remainingAmount": 0,
  "currency": "RUB",
  "confirmedAt": "2025-01-30T12:05:00Z",
  "bankDetails": {
    "bankTransactionId": "bank_txn_789",
    "authorizationCode": "AUTH123",
    "rrn": "123456789012",
    "responseCode": "00",
    "responseMessage": "Approved"
  },
  "fees": {
    "processingFee": 3000,
    "totalFees": 3000,
    "feeCurrency": "RUB"
  },
  "settlement": {
    "settlementDate": "2025-01-31T00:00:00Z",
    "settlementAmount": 147000,
    "settlementCurrency": "RUB"
  }
}
</code></pre>
<h3>5. Отмена платежа</h3>
<p><strong>POST</strong> <code>/api/v1/PaymentCancel/cancel</code></p>
<p>Отмена, реверс или возврат платежа в зависимости от его статуса.</p>
<p><strong>Заголовки:</strong></p>
<pre><code>Content-Type: application/json
</code></pre>
<p><strong>Тело запроса:</strong></p>
<pre><code class="language-json">{
  "teamSlug": "my-store",
  "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
  "paymentId": "pay_123456789",
  "reason": "Customer requested cancellation",
  "receipt": {
    "email": "customer@example.com",
    "phone": "+79001234567",
    "taxation": "osn"
  },
  "force": false,
  "data": {
    "externalRequestId": "cancel_req_12345",
    "customerReason": "Changed mind",
    "merchantReference": "CANCEL-ORDER-12345"
  }
}
</code></pre>
<p><strong>Ответ (200 OK) - Возврат:</strong></p>
<pre><code class="language-json">{
  "success": true,
  "paymentId": "pay_123456789",
  "orderId": "order-12345",
  "status": "REFUNDED",
  "cancellationType": "FULL_REFUND",
  "originalAmount": 150000,
  "cancelledAmount": 150000,
  "remainingAmount": 0,
  "currency": "RUB",
  "cancelledAt": "2025-01-30T12:10:00Z",
  "bankDetails": {
    "bankTransactionId": "bank_cancel_789",
    "originalAuthorizationCode": "AUTH123",
    "cancellationAuthorizationCode": "REFUND456",
    "rrn": "123456789012",
    "responseCode": "00",
    "responseMessage": "Refund Approved"
  },
  "refund": {
    "refundId": "refund_789",
    "refundStatus": "PROCESSING",
    "expectedProcessingTime": "3-5 business days",
    "refundMethod": "card",
    "cardInfo": {
      "cardMask": "4111****1111",
      "cardType": "Visa",
      "issuingBank": "Sberbank"
    }
  },
  "details": {
    "reason": "Customer requested cancellation",
    "wasForced": false,
    "processingDuration": "00:00:01.250"
  }
}
</code></pre>
<hr>
<h2>Примеры запросов</h2>
<h3>Создание платежа с полной аутентификацией</h3>
<pre><code class="language-bash">#!/bin/bash

# Параметры платежа
team_slug="my-test-store"
password="MySecretPassword123"
amount="250000"
order_id="order-$(date +%s)"
currency="RUB"
description="Test payment"
email="customer@example.com"
success_url="https://mystore.com/success"
fail_url="https://mystore.com/fail"

# Генерация токена (параметры в алфавитном порядке)
token_params="${amount}${currency}${description}${email}${fail_url}${order_id}${success_url}${team_slug}${password}"
token=$(echo -n "$token_params" | sha256sum | cut -d' ' -f1)

# Создание платежа
curl -X POST https://gateway.hackload.com/api/v1/PaymentInit/init \
  -H "Content-Type: application/json" \
  -d "{
    \"teamSlug\": \"$team_slug\",
    \"token\": \"$token\",
    \"amount\": $amount,
    \"orderId\": \"$order_id\",
    \"currency\": \"$currency\",
    \"description\": \"$description\",
    \"email\": \"$email\",
    \"successURL\": \"$success_url\",
    \"failURL\": \"$fail_url\",
    \"language\": \"ru\"
  }"
</code></pre>
<h3>Проверка статуса платежа</h3>
<pre><code class="language-bash">#!/bin/bash

# Параметры для проверки
team_slug="my-test-store"
password="MySecretPassword123"
payment_id="pay_123456789"

# Простой токен для проверки статуса (минимальные параметры)
token_params="${payment_id}${team_slug}${password}"
token=$(echo -n "$token_params" | sha256sum | cut -d' ' -f1)

# Проверка статуса
curl -X POST https://gateway.hackload.com/api/v1/PaymentCheck/check \
  -H "Content-Type: application/json" \
  -d "{
    \"teamSlug\": \"$team_slug\",
    \"token\": \"$token\",
    \"paymentId\": \"$payment_id\",
    \"includeTransactions\": true,
    \"includeCardDetails\": true,
    \"language\": \"ru\"
  }"
</code></pre>
<h3>Подтверждение платежа</h3>
<pre><code class="language-bash">#!/bin/bash

# Параметры для подтверждения
team_slug="my-test-store"
password="MySecretPassword123"
payment_id="pay_123456789"
amount="250000"

# Токен для подтверждения
token_params="${amount}${payment_id}${team_slug}${password}"
token=$(echo -n "$token_params" | sha256sum | cut -d' ' -f1)

# Подтверждение платежа
curl -X POST https://gateway.hackload.com/api/v1/PaymentConfirm/confirm \
  -H "Content-Type: application/json" \
  -d "{
    \"teamSlug\": \"$team_slug\",
    \"token\": \"$token\",
    \"paymentId\": \"$payment_id\",
    \"amount\": $amount,
    \"description\": \"Order confirmation\"
  }"
</code></pre>
<h3>Отмена платежа</h3>
<pre><code class="language-bash">#!/bin/bash

# Параметры для отмены
team_slug="my-test-store"
password="MySecretPassword123"
payment_id="pay_123456789"
reason="Customer requested cancellation"

# Токен для отмены
token_params="${payment_id}${team_slug}${password}"
token=$(echo -n "$token_params" | sha256sum | cut -d' ' -f1)

# Отмена платежа
curl -X POST https://gateway.hackload.com/api/v1/PaymentCancel/cancel \
  -H "Content-Type: application/json" \
  -d "{
    \"teamSlug\": \"$team_slug\",
    \"token\": \"$token\",
    \"paymentId\": \"$payment_id\",
    \"reason\": \"$reason\"
  }"
</code></pre>
<h2>Webhook-уведомления</h2>
<p>Система платежного шлюза автоматически отправляет HTTP-уведомления (webhooks) на указанный URL при изменении статуса платежа. Это позволяет интернет-магазину мгновенно реагировать на события платежей без необходимости постоянного опроса API.</p>
<h3>Когда отправляются webhook-уведомления</h3>
<p>Webhook отправляется при <strong>каждом</strong> изменении статуса платежа в следующих случаях:</p>
<h4>Сценарий полного жизненного цикла платежа</h4>
<p><strong>1. Создание платежа</strong> - <code>POST /api/v1/PaymentInit/init</code></p>
<pre><code class="language-json">{
  "teamSlug": "my-store",
  "amount": 150000,
  "orderId": "order-12345",
  "currency": "RUB",
  "notificationURL": "https://mystore.com/webhook"
}
</code></pre>
<p><strong>Webhook:</strong> Переход <code>INIT</code> → <code>NEW</code></p>
<pre><code class="language-json">{
  "paymentId": "pmt_abc123",
  "status": "NEW",
  "teamSlug": "my-store",
  "timestamp": "2025-01-15T10:30:00Z",
  "data": {
    "transition_timestamp": "2025-01-15T10:30:00Z",
    "status_name": "NEW"
  }
}
</code></pre>
<p><strong>2. Покупатель отправляет данные карты</strong> - <code>POST /api/v1/paymentform/submit</code></p>
<pre><code class="language-json">{
  "paymentId": "pmt_abc123",
  "cardNumber": "4111111111111111",
  "expiryDate": "12/25",
  "cvv": "123",
  "cardholderName": "John Doe",
  "email": "customer@example.com"
}
</code></pre>
<p><strong>Webhook #1:</strong> Переход <code>NEW</code> → <code>FORM_SHOWED</code> (покупатель начал заполнение формы)</p>
<pre><code class="language-json">{
  "paymentId": "pmt_abc123",
  "status": "FORM_SHOWED",
  "teamSlug": "my-store",
  "timestamp": "2025-01-15T10:30:15Z",
  "data": {
    "transition_timestamp": "2025-01-15T10:30:15Z",
    "status_name": "FORM_SHOWED"
  }
}
</code></pre>
<p><strong>Webhook #2:</strong> Переход <code>FORM_SHOWED</code> → <code>AUTHORIZED</code> (карта успешно обработана)</p>
<pre><code class="language-json">{
  "paymentId": "pmt_abc123",
  "status": "AUTHORIZED",
  "teamSlug": "my-store",
  "timestamp": "2025-01-15T10:30:45Z",
  "data": {
    "transition_timestamp": "2025-01-15T10:30:45Z",
    "status_name": "AUTHORIZED"
  }
}
</code></pre>
<p><strong>Если обработка карты неудачна:</strong><br><strong>Webhook #2 (альтернативный):</strong> Переход <code>FORM_SHOWED</code> → <code>REJECTED</code> (ошибка обработки карты)</p>
<pre><code class="language-json">{
  "paymentId": "pmt_abc123",
  "status": "failed",
  "teamSlug": "my-store",
  "timestamp": "2025-01-15T10:30:50Z",
  "data": {
    "event_type": "payment_failed",
    "failure_reason": "REJECTED"
  }
}
</code></pre>
<p><strong>3. Подтверждение платежа</strong> - <code>POST /api/v1/PaymentConfirm/confirm</code><br><strong>Webhook:</strong> Переход <code>AUTHORIZED</code> → <code>CONFIRMED</code> (ОСОБЫЙ случай - уведомление о завершении)</p>
<pre><code class="language-json">{
  "paymentId": "pmt_abc123",
  "status": "completed",
  "teamSlug": "my-store",
  "timestamp": "2025-01-15T10:31:00Z",
  "data": {
    "event_type": "payment_completed"
  }
}
</code></pre>
<p><strong>HTTP-заголовки webhook:</strong></p>
<pre><code>X-Webhook-Signature: sha256=a1b2c3d4e5f6...
X-Webhook-Event: payment_completed
X-Webhook-Delivery: uuid-123e4567-e89b-12d3-a456-426614174000
User-Agent: PaymentGateway-Webhook/1.0
Content-Type: application/json
</code></pre>
<h4>Сценарии ошибок</h4>
<p><strong>Отклонение платежа банком</strong><br><strong>Webhook:</strong> Переход <code>FORM_SHOWED</code> → <code>REJECTED</code></p>
<pre><code class="language-json">{
  "paymentId": "pmt_abc123",
  "status": "failed",
  "teamSlug": "my-store",
  "timestamp": "2025-01-15T10:30:50Z",
  "data": {
    "event_type": "payment_failed",
    "failure_reason": "REJECTED"
  }
}
</code></pre>
<p><strong>Отмена платежа</strong> - <code>POST /api/v1/PaymentCancel/cancel</code><br><strong>Webhook:</strong> Переход к <code>CANCELLED</code></p>
<pre><code class="language-json">{
  "paymentId": "pmt_abc123",
  "status": "failed",
  "teamSlug": "my-store",
  "timestamp": "2025-01-15T10:32:00Z",
  "data": {
    "event_type": "payment_failed",
    "failure_reason": "CANCELLED"
  }
}
</code></pre>
<h3>Безопасность webhook</h3>
<p>Каждый webhook содержит подпись HMAC-SHA256 для проверки подлинности:</p>
<pre><code class="language-javascript">// Проверка подписи webhook (Node.js)
const crypto = require('crypto');

function verifyWebhookSignature(payload, signature, secret) {
  const expectedSignature = crypto
    .createHmac('sha256', secret)
    .update(JSON.stringify(payload))
    .digest('hex');
  
  return signature === `sha256=${expectedSignature}`;
}
</code></pre>
<h3>Retry-логика</h3>
<p>Система автоматически повторяет отправку webhook при ошибках:</p>
<ul>
<li><strong>Количество попыток:</strong> Настраивается для каждой команды (по умолчанию 3)</li>
<li><strong>Интервалы:</strong> Экспоненциальная задержка (1с, 2с, 4с, 8с...)</li>
<li><strong>Timeout:</strong> Настраивается для каждой команды (по умолчанию 30 секунд)</li>
</ul>
<h3>Интеграция с webhook уведомлениями</h3>
<pre><code class="language-javascript">// Пример обработчика webhook уведомлений (Node.js)
const express = require('express');
const crypto = require('crypto');
const app = express();

app.use(express.json());

// Webhook endpoint
app.post('/payment/webhook', (req, res) =&gt; {
  const payment = req.body;
  const signature = req.headers['x-webhook-signature'];
  const eventType = req.headers['x-webhook-event'];
  
  // Проверка подписи (замените на ваш webhook secret)
  const webhookSecret = 'your-webhook-secret-from-team-settings';
  const isValid = verifyWebhookSignature(req.body, signature, webhookSecret);
  
  if (!isValid) {
    console.error('Invalid webhook signature');
    return res.status(401).json({ error: 'Invalid signature' });
  }
  
  // Логирование уведомления
  console.log('Payment notification received:', {
    paymentId: payment.paymentId,
    status: payment.status,
    eventType: eventType,
    timestamp: payment.timestamp
  });
  
  // Обработка различных статусов
  switch (payment.status) {
    case 'completed':
    case 'CONFIRMED':
      // Платеж подтвержден - выполнить заказ
      processOrder(payment.paymentId);
      break;
      
    case 'failed':
    case 'REJECTED':
    case 'CANCELLED':
    case 'EXPIRED':
      // Платеж не прошел - уведомить покупателя
      notifyPaymentFailure(payment.paymentId, payment.data?.failure_reason);
      break;
      
    case 'AUTHORIZED':
      // Платеж авторизован - можно подтверждать
      handlePaymentAuthorized(payment.paymentId);
      break;
      
    case 'NEW':
    case 'FORM_SHOWED':
      // Промежуточные статусы - можно обновить UI
      updatePaymentStatus(payment.paymentId, payment.status);
      break;
  }
  
  // Подтверждение получения webhook
  res.status(200).json({ received: true });
});

function verifyWebhookSignature(payload, signature, secret) {
  if (!signature || !signature.startsWith('sha256=')) {
    return false;
  }
  
  const expectedSignature = crypto
    .createHmac('sha256', secret)
    .update(JSON.stringify(payload))
    .digest('hex');
  
  return signature === `sha256=${expectedSignature}`;
}

function processOrder(paymentId) {
  console.log(`✅ Processing order for payment ${paymentId}`);
  // Логика выполнения заказа:
  // - Отправка товара
  // - Отправка чека покупателю
  // - Обновление статуса заказа в базе данных
}

function notifyPaymentFailure(paymentId, reason) {
  console.log(`❌ Payment failed: ${paymentId}, reason: ${reason}`);
  // Логика обработки неудачной оплаты:
  // - Уведомление покупателя
  // - Освобождение зарезервированных товаров
  // - Логирование для аналитики
}

function handlePaymentAuthorized(paymentId) {
  console.log(`🔄 Payment authorized: ${paymentId}`);
  // Платеж авторизован, можно подтверждать через API
  // confirmPayment(paymentId);
}

function updatePaymentStatus(paymentId, status) {
  console.log(`📊 Payment status updated: ${paymentId} -&gt; ${status}`);
  // Обновление статуса в UI или базе данных
}

app.listen(3000, () =&gt; {
  console.log('Webhook server running on port 3000');
});
</code></pre>
<h3>Отладка webhook</h3>
<p>Для тестирования webhook-уведомлений рекомендуется:</p>
<ol>
<li><strong>Локальная разработка:</strong> Используйте ngrok для проброса localhost</li>
</ol>
<pre><code class="language-bash"># Установка ngrok
npm install -g ngrok

# Запуск туннеля
ngrok http 3000

# Используйте полученный URL в notificationURL
# Например: https://abc123.ngrok.io/payment/webhook
</code></pre>
<ol start="2">
<li><strong>Логирование:</strong> Сохраняйте все входящие webhook для анализа</li>
</ol>
<pre><code class="language-javascript">app.post('/payment/webhook', (req, res) =&gt; {
  // Сохранение webhook в файл для отладки
  const fs = require('fs');
  const logEntry = {
    timestamp: new Date().toISOString(),
    headers: req.headers,
    body: req.body
  };
  
  fs.appendFileSync('webhook.log', JSON.stringify(logEntry) + '\n');
  
  // ... остальная логика
});
</code></pre>
<ol start="3">
<li><strong>Мониторинг:</strong> Отслеживайте доставку webhook в логах платежного шлюза</li>
</ol>
<h3>Полный пример интеграции</h3>
<pre><code class="language-python"># Python пример полной интеграции
import hashlib
import requests
import json
from datetime import datetime

class PaymentGatewayClient:
    def __init__(self, team_slug, password, base_url="https://gateway.hackload.com/api/v1"):
        self.team_slug = team_slug
        self.password = password
        self.base_url = base_url
    
    def generate_token(self, params):
        """Генерация токена аутентификации"""
        # Сортируем параметры в алфавитном порядке
        sorted_params = sorted(params.items())
        
        # Конкатенируем значения
        token_string = ''.join(str(value) for key, value in sorted_params)
        
        # Добавляем пароль
        token_string += f"{self.password}"
        
        # Генерируем SHA-256 хеш
        return hashlib.sha256(token_string.encode()).hexdigest()
    
    def create_payment(self, amount, order_id, currency="RUB", **kwargs):
        """Создание нового платежа"""
        params = {
            'amount': str(amount),
            'currency': currency,
            'orderId': order_id,
            'teamSlug': self.team_slug
        }
        
        # Добавляем дополнительные параметры
        for key, value in kwargs.items():
            if value is not None:
                params[key] = str(value)
        
        # Генерируем токен
        token = self.generate_token(params)
        
        # Подготавливаем запрос
        request_data = params.copy()
        request_data['token'] = token
        
        # Отправляем запрос
        response = requests.post(
            f"{self.base_url}/PaymentInit/init",
            json=request_data,
            headers={'Content-Type': 'application/json'}
        )
        
        return response.json()
    
    def check_payment_status(self, payment_id=None, order_id=None):
        """Проверка статуса платежа"""
        params = {
            'teamSlug': self.team_slug
        }
        
        if payment_id:
            params['paymentId'] = payment_id
        elif order_id:
            params['orderId'] = order_id
        else:
            raise ValueError("Either payment_id or order_id must be provided")
        
        # Генерируем токен
        token = self.generate_token(params)
        
        # Подготавливаем запрос
        request_data = params.copy()
        request_data['token'] = token
        request_data['includeTransactions'] = True
        
        # Отправляем запрос
        response = requests.post(
            f"{self.base_url}/PaymentCheck/check",
            json=request_data,
            headers={'Content-Type': 'application/json'}
        )
        
        return response.json()
    
    def confirm_payment(self, payment_id, amount):
        """Подтверждение платежа"""
        params = {
            'amount': str(amount),
            'paymentId': payment_id,
            'teamSlug': self.team_slug
        }
        
        # Генерируем токен
        token = self.generate_token(params)
        
        # Подготавливаем запрос
        request_data = params.copy()
        request_data['token'] = token
        
        # Отправляем запрос
        response = requests.post(
            f"{self.base_url}/PaymentConfirm/confirm",
            json=request_data,
            headers={'Content-Type': 'application/json'}
        )
        
        return response.json()
    
    def cancel_payment(self, payment_id, reason="API cancellation"):
        """Отмена платежа"""
        params = {
            'paymentId': payment_id,
            'teamSlug': self.team_slug
        }
        
        # Генерируем токен
        token = self.generate_token(params)
        
        # Подготавливаем запрос
        request_data = params.copy()
        request_data['token'] = token
        request_data['reason'] = reason
        
        # Отправляем запрос
        response = requests.post(
            f"{self.base_url}/PaymentCancel/cancel",
            json=request_data,
            headers={'Content-Type': 'application/json'}
        )
        
        return response.json()

# Пример использования
if __name__ == "__main__":
    # Создаем клиента
    client = PaymentGatewayClient("my-store", "MySecretPassword123")
    
    # Создаем платеж
    payment_result = client.create_payment(
        amount=100000,  # 1000 рублей в копейках
        order_id=f"order-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
        currency="RUB",
        description="Test payment",
        email="customer@example.com",
        successURL="https://mystore.com/success",
        failURL="https://mystore.com/fail"
    )
    
    if payment_result.get('success'):
        payment_id = payment_result['paymentId']
        print(f"Payment created: {payment_id}")
        print(f"Payment URL: {payment_result['paymentURL']}")
        
        # Проверяем статус
        status_result = client.check_payment_status(payment_id=payment_id)
        print(f"Payment status: {status_result}")
        
    else:
        print(f"Payment creation failed: {payment_result}")
</code></pre>
<hr>
<h2>Важные примечания</h2>
<ol>
<li><strong>Безопасность</strong>: Никогда не передавайте пароль команды в открытом виде. Используйте HTTPS для всех запросов.</li>
<li><strong>Idempotency</strong>: Для критичных операций используйте поля идемпотентности (externalRequestId, idempotencyKey).</li>
<li><strong>Webhook</strong>: Настройте обработку webhook уведомлений для получения актуального статуса платежей.</li>
<li><strong>Тестирование</strong>: Используйте тестовые данные карт для проверки интеграции.</li>
<li><strong>Мониторинг</strong>: Логируйте все запросы и ответы API для диагностики проблем.</li>
<li><strong>Rate Limiting</strong>: Соблюдайте лимиты частоты запросов для избежания блокировок.</li>
</ol>
</div>