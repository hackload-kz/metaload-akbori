version: '3.8'

services:
  # Java version (commented out)
  # biletter-app-java:
  #   container_name: biletter-app-java
  #   image: biletter-app-java
  #   build:
  #     context: .
  #     dockerfile: Dockerfile_arm64
  #   mem_limit: 5gb
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     # Database configuration
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://biletter-postgres:5432/biletter_db
  #     # Kafka configuration
  #     SPRING_KAFKA_BOOTSTRAP_SERVERS: biletter-kafka:29092
  #   networks:
  #     - biletter-net
  #   volumes:
  #     - ./target:/app/shared
  #   depends_on:
  #     - postgres
  #     - kafka
  #   profiles:
  #     - app

  # Go version
  biletter-app:
    container_name: biletter-app-go
    image: biletter-app-go
    build:
      context: .
      dockerfile: Dockerfile
    mem_limit: 1gb
    ports:
      - "8081:8081"
    environment:
      # Service configuration
      PORT: "8081"

      # Database configuration
      DB_HOST: biletter-postgres
      DB_USERNAME: biletter_user
      DB_PASSWORD: biletter_pass

      # Redis configuration
      REDIS_HOST: biletter-redis

      # Kafka configuration
      KAFKA_BROKERS: biletter-kafka:29092
    networks:
      - biletter-net
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    profiles:
      - app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:15
    container_name: biletter-postgres
    environment:
      POSTGRES_DB: biletter_db
      POSTGRES_USER: biletter_user
      POSTGRES_PASSWORD: biletter_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - biletter-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U biletter_user -d biletter_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: biletter-redis
    ports:
      - "6379:6379"
    networks:
      - biletter-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: biletter-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - biletter-net
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: biletter-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - biletter-net
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list" ]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: biletter-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

volumes:
  postgres_data:
networks:
  biletter-net:
    name: biletter-net
    driver: bridge
